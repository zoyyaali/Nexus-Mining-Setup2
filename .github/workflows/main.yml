name: Nexus Mining

on:
  workflow_dispatch:
  schedule:
    - cron: '5 */6 * * *'

jobs:
  mining:
    runs-on: ubuntu-latest
    timeout-minutes: 360

    steps:
      - name: Initial Setup
        id: setup
        run: |
          TIMESTAMP=$(date -u '+%Y%m%d_%H%M%S')
          LOG_FILE="nexus_mining_${{ github.run_id }}.log"
          
          {
            echo "timestamp=$TIMESTAMP"
            echo "log_file=$LOG_FILE"
          } >> $GITHUB_ENV
          
          {
            echo "=== Nexus Mining Workflow ==="
            echo "Started: $(date -u '+%Y-%m-%d %H:%M:%S')"
            echo "Workflow ID: ${{ github.run_id }}"
            echo "User: ${{ github.actor }}"
            echo "Runner: ${{ runner.os }}"
            echo "=========================="
          } > "$HOME/$LOG_FILE"
          
          if [ ! -f "$HOME/$LOG_FILE" ]; then
            echo "Failed to create log file"
            exit 1
          fi
        shell: bash

      - name: System Optimization
        id: optimize
        run: |
          {
            echo "=== System Optimization: $(date -u) ==="
            
            for service in snapd unattended-upgrades apache2 mysql docker; do
              sudo systemctl stop $service 2>/dev/null || true
              echo "Stopped $service"
            done
            
            if [ -d "/sys/devices/system/cpu/cpu0/cpufreq" ]; then
              for cpu in /sys/devices/system/cpu/cpu*/cpufreq/scaling_governor; do
                echo "performance" | sudo tee "$cpu" 2>/dev/null || true
              done
              echo "CPU set to performance mode"
            fi
            
            sudo sysctl -w vm.swappiness=10 2>/dev/null || true
            sudo sysctl -w vm.dirty_ratio=60 2>/dev/null || true
            
            echo "=== Optimization Complete: $(date -u) ==="
          } >> "$HOME/${{ env.log_file }}"
        shell: bash

      - name: Install Dependencies
        id: dependencies
        run: |
          {
            echo "=== Installing Dependencies: $(date -u) ==="
            
            sudo apt-get update
            PACKAGES=(expect curl htop sysstat numactl net-tools)
            
            for pkg in "${PACKAGES[@]}"; do
              if sudo apt-get install -y "$pkg"; then
                echo "Installed $pkg"
              else
                echo "Failed to install $pkg"
              fi
            done
            
            echo "=== Dependencies Complete: $(date -u) ==="
          } >> "$HOME/${{ env.log_file }}"
        shell: bash

      - name: Setup Monitor
        id: monitor
        run: |
          cat > "$HOME/monitor.sh" << 'EOF'
          #!/bin/bash
          LOG_FILE="$1"
          INTERVAL=300

          while true; do
            {
              echo "=== System Status: $(date -u) ==="
              echo "--- CPU Usage ---"
              top -bn1 | head -n 10
              echo "--- Memory Usage ---"
              free -h
              echo "--- Node Status ---"
              ps aux | grep nexus-network
              echo "=================="
            } >> "$LOG_FILE"
            sleep $INTERVAL
          done
          EOF
          
          chmod +x "$HOME/monitor.sh"
        shell: bash

      - name: Run Nexus Mining
        id: mining
        run: |
          {
            echo "=== Starting Mining: $(date -u) ==="
            
            "$HOME/monitor.sh" "$HOME/${{ env.log_file }}" &
            MONITOR_PID=$!
            
            for i in {1..5}; do
              echo "Downloading Nexus CLI (attempt $i/5)"
              if curl -sSL --retry 3 --retry-delay 10 https://cli.nexus.xyz/ | sh; then
                echo "Download successful"
                break
              fi
              if [ $i -eq 5 ]; then
                echo "Download failed"
                exit 1
              fi
              sleep 10
            done
            
            cat > "$HOME/node.exp" << 'EOFEXP'
          #!/usr/bin/expect
          set timeout -1
          log_user 1
          spawn $env(HOME)/.nexus/bin/nexus-network start --node-id 36704067
          expect {
            "Do you agree to the Nexus Beta Terms of Use?" {
              send "Y\r"
              exp_continue
            }
            eof {
              # This will keep the script alive until the node process is killed.
              # A non-zero exit here would cause the workflow to fail prematurely.
              exit 0
            }
          }
          EOFEXP
            
            chmod +x "$HOME/node.exp"
            
            echo "Starting node..."
            # Use "sudo -E" to preserve the user's environment variables (like HOME)
            sudo -E numactl --physcpubind=0-3 --membind=0 "$HOME/node.exp" &
            NODE_PID=$!
            
            sudo renice -n -20 -p $NODE_PID || true
            sudo chrt -f -p 99 $NODE_PID || true
            
            echo "Node started with PID: $NODE_PID"
            
            echo "Running for 5h 55m..."
            sleep 21300
            
            echo "Stopping processes..."
            kill $MONITOR_PID || true
            kill $NODE_PID || true
            pkill -f nexus-network || true
            
            echo "=== Mining Complete: $(date -u) ==="
          } >> "$HOME/${{ env.log_file }}"
        shell: bash

      - name: Upload Log
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: nexus-mining-log-${{ github.run_id }}
          path: ~/nexus_mining_${{ github.run_id }}.log
          retention-days: 7

